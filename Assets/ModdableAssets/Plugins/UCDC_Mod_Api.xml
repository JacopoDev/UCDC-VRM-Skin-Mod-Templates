<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UCDC_Mod_Api</name>
    </assembly>
    <members>
        <member name="T:UCDC_Mod_Api.GameInterfaces.IAiApiProvider">
            <summary>
            Notice: Interface is implemented by the game classes<br /><br />
            Injected game object in <see cref="T:UCDC_Mod_Api.ModInterfaces.ITextAiAccessor"/> and  <see cref="T:UCDC_Mod_Api.ModInterfaces.IVoiceAiAccessor"/> during mod load
            </summary>
        </member>
        <member name="T:UCDC_Mod_Api.GameInterfaces.ISettingsProvider">
            <summary>
            Notice: Interface is implemented by the game classes <br /><br />
            Gives access to mod settings <br />
            To avoid mod conflicts I suggest adding mod name to all mod settings as a prefix, for example saving MagicNumber setting in a Template mod: <br />
            <code>
            SaveInt("TemplateMod_MagicNumber", 5);
            </code>
            </summary>
        </member>
        <member name="T:UCDC_Mod_Api.GameInterfaces.ISkinDatabaseProvider">
            <summary>
            Notice: Interface is implemented by the game classes <br /><br />
            Adds a way to access in-game skin list 
            </summary>
        </member>
        <member name="T:UCDC_Mod_Api.GameInterfaces.IChatProvider">
            <summary>
            Notice: Interface is implemented by the game classes <br /><br />
            Gives current list of messages to be processed in text-gen API (chat messages, emotion analysis, user facts)
            </summary>
        </member>
        <member name="T:UCDC_Mod_Api.Models.Message">
            <summary>
            Basic chat structure <br /><br />
            Message.<see cref="F:UCDC_Mod_Api.Models.Message.role"/> can take values of: "User", "Assistant", "System"
            </summary>
        </member>
        <member name="T:UCDC_Mod_Api.Models.PropPlacementInfo">
            <summary>
            Structure for skins to fix the placement for each prop 
            </summary>
        </member>
        <member name="F:UCDC_Mod_Api.Models.PropPlacementInfo.PropName">
            <summary>
            it has to match the prop definition name so game knows which prop position you are modifying
            </summary>
        </member>
        <member name="T:UCDC_Mod_Api.Models.TextAiInfo">
            <summary>
            Stores configuration flags for text generation AI behavior and capabilities.
            Without it the game assumes all false
            </summary>
        </member>
        <member name="F:UCDC_Mod_Api.Models.TextAiInfo.IsImageReading">
            <summary>
            Indicates whether the AI supports interpreting images as input.
            Images are sent in base64 format
            </summary>
        </member>
        <member name="F:UCDC_Mod_Api.Models.TextAiInfo.IsQuick">
            <summary>
            Set to true if the text generation is quick (say generating a basic sentence in seconds). 
            Will use text-generation in game moments where timing is important (character asking for quick help).
            Otherwise the game will use hard-coded phrases in those moments.
            </summary>
        </member>
        <member name="F:UCDC_Mod_Api.Models.TextAiInfo.IsMultiLanguage">
            <summary>
            Indicates support for multiple languages in both input and output. If true the game will send system prompt
            based on game language setting, otherwise always English
            </summary>
        </member>
        <member name="F:UCDC_Mod_Api.Models.TextAiInfo.IsStreaming">
            <summary>
            Enables streaming output, where responses are returned progressively as they are generated.
            </summary>
        </member>
        <member name="F:UCDC_Mod_Api.Models.TextAiInfo.IsStructured">
            <summary>
            Indicates support for structured outputs for fixed JSON format,
            If it is supported it may speed up conversations (one generation instead of 3).
            </summary>
        </member>
        <member name="T:UCDC_Mod_Api.Models.TextResult">
            <summary>
            Result value from text-gen ai <br />
            Game considers messages successful if code equals 200 (from HttpStatusCode.OK)
            </summary>
        </member>
        <member name="T:UCDC_Mod_Api.Models.VoiceResult">
            <summary>
            Result value from voice-gen ai <br />
            Game considers messages successful if code equals 200 (from HttpStatusCode.OK)
            </summary>
        </member>
        <member name="T:UCDC_Mod_Api.ModInterfaces.ICreatedOnLoad">
            <summary>
            Implement this if you want to instantiate a GameObject during mod initialization <br /><br />
            Game looks for any script implementing it and initializes one instance of the provided object<br />
            May be useful for some kind of managers, permanent overlays<br />
            </summary>
        </member>
        <member name="T:UCDC_Mod_Api.ModInterfaces.IModPanelCreator">
            <summary>
            Implement this if you want to add mod settings to phone UI <br /><br />
            Those buttons can be accessed in game via Menu->Settings->Mods submenu<br />
            </summary>
        </member>
        <member name="T:UCDC_Mod_Api.ModInterfaces.ISettingsAccessor">
            <summary>
            Implement this if you want your script to get access to global mod settings <br /> <br />
            To avoid mod conflicts I suggest adding mod name to all mod settings as a prefix, for example saving MagicNumber setting in a Template mod: <br />
            <code>
            SaveInt("TemplateMod_MagicNumber", 5);
            </code>
            </summary>
        </member>
        <member name="T:UCDC_Mod_Api.ModInterfaces.ISkinAccessor">
            <summary>
            Implement this if you want to add new skin to the game
            </summary>
        </member>
        <member name="T:UCDC_Mod_Api.ModInterfaces.ITextAiAccessor">
            <summary>
            Implement this if you want to add new text-gen ai API <br /><br />
            <remarks>Note that ITextAiAccessor.<see cref="M:UCDC_Mod_Api.ModInterfaces.ITextAiAccessor.GenerateMessage(UCDC_Mod_Api.GameInterfaces.IChatProvider,System.Action{UCDC_Mod_Api.Models.TextResult})"/> is called in game as asynchronous operation, as a consequence there may be difficulties calling some UnityEngine methods on this thread (can be fixed with i.e. using thread dispatcher)<br /></remarks>
            </summary>
        </member>
        <member name="T:UCDC_Mod_Api.ModInterfaces.IVoiceAiAccessor">
            <summary>
            Implement this if you want to add new voice-gen ai API <br /><br />
            <remarks>Note that IVoiceAiAccessor.<see cref="M:UCDC_Mod_Api.ModInterfaces.IVoiceAiAccessor.GenerateMessage(System.String,System.Action{UCDC_Mod_Api.Models.VoiceResult})"/> is called in game as asynchronous operation, as a consequence there may be difficulties calling some UnityEngine methods on this thread (can be fixed with i.e. using thread dispatcher)<br /></remarks>
            </summary>
        </member>
        <member name="T:UCDC_Mod_Api.ModInterfaces.SkinLocators.IBlinkLocator">
            <summary>
            Implement this and add as monoBehaviour component to root skin object to add support to blinking managed by game <br /><br />
            </summary>
        </member>
        <member name="T:UCDC_Mod_Api.ModInterfaces.SkinLocators.IExpressionsLocator">
            <summary>
            Implement this and add as monoBehaviour component to root skin object to add support to basic facial expressions managed by game <br /><br />
            </summary>
        </member>
        <member name="T:UCDC_Mod_Api.ModInterfaces.SkinLocators.IHeadPatLocator">
            <summary>
            Implement this and add as monoBehaviour component  to root skin object to add support to giving head pats! <br /><br />
            The component should hold a transform where an object that allows headpatting should be placed and head transform. <br />
            </summary>
        </member>
        <member name="T:UCDC_Mod_Api.ModInterfaces.SkinLocators.IPropsLocator">
            <summary>
            Implement this and add as monoBehaviour component to root skin object to add support to dynamic props adding <br /><br />
            <remarks>The component should hold Transforms where each prop object should be placed. <br />
            Transforms should be empty objects, you can rotate and scale them so props are properly placed on skin <br />
            You can add root position overrides in ITextAiAccessor.<see cref="M:UCDC_Mod_Api.ModInterfaces.SkinLocators.IPropsLocator.GetPropRootOverrides"/> to move, rotate and rescale so prop is properly attached to the skin </remarks>
            </summary>
        </member>
        <member name="T:UCDC_Mod_Api.ModInterfaces.SkinLocators.IRagDollLocator">
            <summary>
            Implement this and add as monoBehaviour component to root skin object to add support to ragdolling character <br /><br />
            The component should hold Rigidbodies to turn on during ragdoll state. <br />
            </summary>
        </member>
    </members>
</doc>
